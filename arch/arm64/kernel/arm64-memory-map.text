#define VA_BITS         (CONFIG_ARM64_VA_BITS)
#define VA_START        (UL(0xffffffffffffffff) - (UL(1) << VA_BITS) + 1)
#define PAGE_OFFSET     (UL(0xffffffffffffffff) - (UL(1) << (VA_BITS - 1)) + 1)
#define KIMAGE_VADDR    (MODULES_END)
#define VMALLOC_START   (MODULES_END)
#define VMALLOC_END     (PAGE_OFFSET - PUD_SIZE - VMEMMAP_SIZE - SZ_64K)
#define MODULES_END     (MODULES_VADDR + MODULES_VSIZE)
#define MODULES_VADDR   (VA_START + KASAN_SHADOW_SIZE)
#define MODULES_VSIZE   (SZ_128M)
#define VMEMMAP_START   (PAGE_OFFSET - VMEMMAP_SIZE)
#define PCI_IO_END      (VMEMMAP_START - SZ_2M)
#define PCI_IO_START    (PCI_IO_END - PCI_IO_SIZE)
#define FIXADDR_TOP     (PCI_IO_START - SZ_2M)
#define TASK_SIZE_64    (UL(1) << VA_BITS) 


所以对应的关系就是:
0x0000_0000_0000_0000 ----- 0x0000_ffff_ffff_ffff共256TB是user space
0x0000_ffff_ffff_ffff ----- 0xffff_0000_0000_0000是空洞Hole
0xffff_0000_0000_0000 ----- 0xffff_2000_0000_0000共32TB是KASAN
0XFFFF_2000_0000_0000 ----- 0xFFFF_2000_0800_0000共128MB是module
0xFFFF_2000_0800_0000 ----- 0XFFFF_7DFF_BFFF_0000是vmalloc 区域. //kernel image位于这个区域
-------
FIXADDR_START ---- -		0xFFFF_7DFF_FEC0_0000是fixmap
0xFFFF_7DFF_FEE0_0000 ----- 0xFFFF_7DFF_FFE0_0000共16MB是PCI IO
------------------
0xFFFF_7E00_0000_0000 ----- 0xFFFF_8000_0000_0000共2TB是vmemmap
0xFFFF_8000_0000_0000 ----- 0XFFFF_FFFF_FFFF_FFFF共128TB是linear mapping. 这个就是PAGE_OFFSET的地方

所以kernel image和linear mapping不在一个区域.
而virt_to_phys的作用是把内核虚拟地址转换成物理地址(针对线性映射区域),因为线性映射区域，物理地址和虚拟地址只有一个偏移.
而现在kernel image和线性映射区域分开了.

那么实现又是如何呢？


#define PHY_OFFFSET ({VM_BUG_ON(memstart_addr & 1); memstart_addr;})

#define __is_lm_address(addr) (!!((addr) & BIT(VA_BITS -1 )))
#define __lm_to_phys(addr)	(((addr) & ~PAGE_OFFSET) + PHYS_OFFSET)
#define __kimg_to_phys(addr) ((addr) - kimage_voffset)

#define __virt_to_phys_nodebug(x) (
	phys_addr_t ___x = (phys_addr_t)(x);
	__is_lm_address(___x) ? __lm_to_phys(__x): __kimg_to_phys(x)(;
)

#define __virt_to_phys(x)	__virt_to_phys_nodebug(x)

static inline virt_to_phys(const volatile void *x)
{
	return __virt_to_phys((unsigned long)(x));
}

这里addr通过(VA_BITS -1 )位是否为1来判断addr是位于kernel image区域还是线性映射区域(因为线性映射区域正好是kernel虚拟地址空间大小的一半).
针对线性映射区域, 虚拟地址和物理地址的偏差是memstart_addr。
针对kernel区域,虚拟地址和物理地址的偏差是kimage_voffset。

那这里的memstart_addr和kimage_voffset是如何确定的。

首先这里kimage_voffset是在函数__primary_switch中确定的.
而memstart_addr是在arm64_memblock_init中确定的.


内存布局:
在完成DTB的映射后，内核就可以访问DTB所在的内存了,通过解析DTB，内核就可以勾勒出整个内存布局的情况:
收集内存布局的信息主要来自:
(1):chosen node。该节点有一个bootargs属性,可能包括了mem=nn[KMG]这样的参数.
(2):memory node.这个节点主要定义了系统中的物理内存布局,
(3):DTB header中的memreserve域.这个域是定义在root node之外的一行字符串.例如: 
/memreserve/ 0x05e00000 0x00010000;

(4):reserved-memory node. 这个节点以及其子节点定义了系统中保留的内存地址区域. 保留内存有两种,一种是静态定义的，用reg属性定义的address和size。另一种是动态定义的,只是用size属性定义了保留内存区域的长度. 在建立地址映射方面，可以通过no-map属性来控制保留区域的地址映射关系的建立.


内核通过memblock模块来管理初始化阶段的物理内存:
对于kernel image, DTB，initrd image, reserved-memory, memreserve节点中的内存，是放在memblock reserved中的,然后在memory node中剩余的内存是放在memory中的.


看见物理内存:
这个时候内核还是只能看见kernel image mapping和DTB这两段内存，其他的是看不见的,虽然已经有了内存的信息(放在memblock)，但是还是不能访问，因为映射还没有建立.那么内核采取的办法就是: 控制创建地址映射memblock_alloc分配页表内存的顺序.
也就是说刚开始的时候创建的地址映射不需要页表内存的分配,当内核需要调用memblock_alloc进行页表物理地址分配的时候，很多已经创建映射的内存已经ready了.
这样在调用crate_mapping的时候不需要分配页表内存了.


在内核编译的时候，在BSS段之后分配了几个page用于swapper进程地址空间(内核kerner image空间)映射,当然，由于kernel image不需要mapping那么多的地址,因此swaper进程translation table的最后一个level中的entry不会全部的填充完毕。换句话说，swapper进程页表可以支持远远大于kernel image mapping那一段的地址区域.实际上,它可以支持的地址段的大小是SWAPPER_INIT_MAP_SIZE，为(PAGE_OFFSET, PAGE_OFFST + SWAPPER_INIT_MAP_SIZE)这段虚拟内存创建地址映射. mapping到(PHYS_OFFSET, PHYS_OFFSET + SWAPPER_INIT_MAP_SIZE)这段物理内存的时候，调用create_mapping不会发生内存分配,因为所有的页表都已经存在了，不需要动态分配.


一旦完成了(PHYS_OFFSET, PHYS_OFFSET+SWAPPER_INIT_MAP_SIZE)这段物理内存的地址映射,这时候，可以自由使用memblock_alloc进行内存分配了，但是要进行限制，确保分配的内存位于(PHYS_OFFSET, PHYS_OFFSET+SWAPPER_INIT_MAP_SIZE)这段物理内存中.

在完成所有memory tyepe类型的memory region的地址映射后，可以解除限制，任意分配memory了. 这时候，所有memory type的地址区域都已经可见了. 而这些宝贵的内存资源就是内存管理模块需要管理的对象了。

